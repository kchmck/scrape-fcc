#!/usr/bin/env python3

import argparse
import itertools
import sqlite3

import asr
import record
import sql
import uls

ap = argparse.ArgumentParser()
ap.add_argument("-I", "--ids", action="store_true", help="scrape ULS IDs")
ap.add_argument("-A", "--asr", action="store_true", help="scrape ASR records")
ap.add_argument("-U", "--uls", action="store_true", help="update ULS records")
ap.add_argument("-S", "--state", help="state to scrape", required=True)
ap.add_argument("-C", "--county", help="county in state to scrape", required=True)
ap.add_argument("-L", "--last-record", nargs="?", type=int, default=0,
    help="start scraping from the given record ID")
ap.add_argument("-d", "--db", help="sqlite database to use", required=True)
args = ap.parse_args()

state = args.state.upper()
county = args.county.upper()

db = sqlite3.connect(args.db)
cursor = db.cursor()

cursor.executescript(sql.CREATE)
cursor.executescript(sql.INIT)
db.commit()

def scrape_uls_ids():
    for rec in uls.ULSRecords(state, county):
        cursor.execute(
            "select rkey from records where rkey = ?",
            (
                rec.rkey,
            )
        )

        print("record {}".format(rec.rkey))

        if cursor.fetchone() is not None:
            print("  skipping")
            continue

        rec.insert(cursor)
        db.commit()

        print("  added")

def scrape_uls():
    cursor.execute(
        "select rkey from records where rkey >= ? order by rkey",
        (
            args.last_record,
        )
    )

    # Save these here so we can use the cursor to insert without invalidating
    # it.
    rkeys = [r[0] for r in cursor]

    for rkey in rkeys:
        print("record {}".format(rkey))

        cursor.execute(
            "select rkey from recordDetails where rkey = ?",
            (
                rkey,
            )
        )

        if cursor.fetchone() is not None:
            print("  skipping")
            continue

        rec = record.Record(rkey)

        if not rec:
            print("  invalid")
            continue

        if rec.status != "active":
            print("  inactive")
            continue

        rec.insert(cursor)

        for loc in rec.locs():
            loc.insert(cursor)

        for freq in rec.freqs():
            freq.insert(cursor)

            for em in freq.emissions():
                em.insert(cursor)

        db.commit()

        print("  scraped {}".format(rec.callsign))

def scrape_asr():
    for tower in asr.ASRTowers(state, county):
        cursor.execute(
            "select tkey from towers where tkey = ?",
            (
                tower.tkey,
            )
        )

        if cursor.fetchone() is not None:
            continue

        tower.insert(cursor)
        db.commit()

        print("added {}".format(tower.tkey))

if args.ids:
    scrape_uls_ids()

if args.uls:
    scrape_uls()

if args.asr:
    scrape_asr()
